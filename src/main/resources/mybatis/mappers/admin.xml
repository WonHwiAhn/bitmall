<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">
	<!-- <select id="getList" parameterType="long" resultType="uservo">
		<![CDATA[
			select no, name, content, date_format(reg_date, '%Y-%M')
			from guestbook]]>
			<if test="_parameter > 0">
				<![CDATA[where no < #{_parameter}]]>
			</if>
			<![CDATA[
			order by reg_date desc
				limit 0, 5
		]]>
	</select> -->
	<!-- <select id="getList" parameterType="map" resultType="customervo">
		<![CDATA[SELECT @rownum:=@rownum+1 AS rownum, B.*  
		  FROM (SELECT @rownum:=0) A, 
		 	   (SELECT *
				  FROM customer
				 WHERE id LIKE '%#{map.keyword}%'
		 ORDER BY no desc) B
		 ORDER BY rownum desc limit #{map.page}, 10]]>
	</select> -->
	<!-- like CONCAT('%',#{keyword},'%')-->
	
	<!-- 회원 총 수 구하는 쿼리 -->
	<select id="getCustomerTotalCountNoOption" resultType="int">
		SELECT count(*) FROM customer
	</select>
	
	<!-- 회원 총 수 구하는 쿼리 [키워드 있을 때] -->
	<select id="getCustomerTotalCount" resultType="int">
		<![CDATA[SELECT count(*) 
				 FROM customer 
				 ]]>
		<include refid = "search"></include>
	</select>
	
	<!-- 키워드 있을 때 리스트 구하는 쿼리 -->
	<select id="getListNo"  resultType="customervo">
		<![CDATA[SELECT no, id, name, birth, tel_no as telNo, phone_no as phoneNo, address, email, auth
				  FROM customer]]>
	</select>
	
	<!-- 키워드 있을 때 리스트 구하는 쿼리 -->
	<select id="getList" parameterType="hashmap" resultType="customervo">
		<![CDATA[SELECT no, id, name, birth, tel_no as telNo, phone_no as phoneNo, address, email, auth
				  FROM customer
				 ]]>
		<include refid = "search"></include>
	</select>
	
	<sql id="search">
  		<if test="searchType != null">
  			<if test="searchType == 'name'.toString()">
  				WHERE name LIKE CONCAT('%', #{keyword}, '%')
  			</if>
  			<if test="searchType == 'id'.toString()">
  				WHERE id LIKE CONCAT('%', #{keyword}, '%')
  			</if>
  			<if test="searchType == 'ni'.toString()">
  					WHERE id LIKE CONCAT('%', #{keyword}, '%')
  					 OR
  					 name LIKE CONCAT('%', #{keyword}, '%')
  			</if>
  		</if>
  	</sql>
	
	<!-- 키워드 없을 때 리스트 구하는 쿼리 -->
	<select id="getListInt" parameterType="int" resultType="customervo">
		<![CDATA[SELECT no, id, name, birth, tel_no as telNo, phone_no as phoneNo, address, email, auth
				  FROM customer
		 		 ORDER BY no desc limit #{page}, 10]]>
	</select>
	
	<!-- 회원 삭제 쿼리 -->
	<delete id="deleteMember" parameterType="long">
		DELETE FROM customer WHERE no=#{no}
	</delete>
	
	<!-- 옵션 삽입하는 쿼리 -->
	<insert id="addOption" parameterType="String">
		INSERT INTO bitmall.option VALUES(null, #{optionName})
	</insert>
	
	<!-- 옵션 리스트 구하는 쿼리 -->
	<select id="getOptionList" resultType="optionvo">
		SELECT no, name
		  FROM bitmall.option
	</select>
	
	<!-- 옵션 총 개수 구하는 쿼리 -->
	<select id="getOptionCount" resultType="int">
		SELECT count(*)
		  FROM bitmall.option
	</select>
	
	<!-- 옵션 번호로 옵션 정보 구하는 쿼리 -->
	<select id="getOptionInfo" parameterType="int" resultType="optionvo">
		SELECT no, name
		  FROM bitmall.option
		 WHERE no = #{no}
	</select>
	
	<!-- 옵션 번호로 옵션 정보 구하는 쿼리 -->
	<select id="getOptionInfoLong" parameterType="Long" resultType="optionvo">
		SELECT no, name
		  FROM bitmall.option
		 WHERE no = #{no}
	</select>
	
	<!-- 옵션 내용 수정하기 -->
	<update id="updateOption" parameterType="optionvo">
		UPDATE bitmall.option 
		   SET name=#{name}
		 WHERE no=#{no}
	</update>
	
	<!-- 옵션 삭제하기 -->
	<update id="deleteOption" parameterType="int">
		DELETE FROM bitmall.option 
		 WHERE no=#{no}
	</update>
	
	<!-- 소옵션 리스트 구하기 -->
	<select id="getSmallOptionList" parameterType="int" resultType="smalloptionvo">
		SELECT no, name, option_no as optionNo
		  FROM small_option
		 WHERE option_no = #{no}
	</select>
	
	<!-- 소옵션 정보 구하기 -->
	<select id="getSmallOptionInfo" parameterType="smalloptionvo" resultType="smalloptionvo">
		SELECT no, name, option_no as optionNo
		  FROM small_option
		 WHERE no = #{no}
		   AND option_no = #{optionNo}
	</select>
	
	<!-- 소옵션 정보 구하기 -->
	<select id="getSmallOptionInfoInt" parameterType="int" resultType="smalloptionvo">
		SELECT no, name, option_no as optionNo
		  FROM small_option
		 WHERE no = #{no}
	</select>
	
	<!-- 소옵션 수정하기 -->
	<update id="updateSmallOption" parameterType="smalloptionvo">
		UPDATE small_option
		   SET name=#{name}
		 WHERE option_no = #{optionNo}
		   AND no = #{no};
	</update>
	
	<!-- 소옵션 삭제하기 -->
	<delete id="deleteSmallOption" parameterType="int">
		DELETE FROM small_option
		 WHERE no = #{no}
	</delete>
	
	<!-- 소옵션 추가하기 -->
	<insert id="addSmallOption" parameterType="smalloptionvo">
		INSERT INTO small_option VALUES(null, #{name}, #{optionNo})
	</insert>
	
	<!-- 상품등록시 소옵션 삽입 -->
	<insert id="insertGoodsSmallOption" parameterType="hashmap">
		INSERT INTO small_option_data
		VALUES(#{goodsNo}, #{soptionData})
	</insert>
</mapper>


